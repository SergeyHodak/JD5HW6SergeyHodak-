package lectures.com.goit.javadev5;import com.google.gson.Gson;import com.google.gson.reflect.TypeToken;import javax.servlet.annotation.WebServlet;import javax.servlet.http.HttpServlet;import javax.servlet.http.HttpServletRequest;import javax.servlet.http.HttpServletResponse;import java.io.IOException;import java.nio.charset.StandardCharsets;import java.time.LocalDateTime;import java.time.format.DateTimeFormatter;import java.util.Arrays;import java.util.Enumeration;import java.util.Map;import java.util.StringJoiner;import java.util.stream.Collectors;@WebServlet(value = "/hello") // Вказати шлях на який ми це все хочемо оброблятиpublic class HelloWorldServlet extends HttpServlet {    // init - для тесту виведе наш сіаут    // init викликається 1 раз при першому звертанні до сервлету    /*    @Override    public void init() throws ServletException {        super.init();        System.out.println("Servlet init!");    }    **/    // req - те що нам прийшло, resp - те куди ми записуємо відповідь    // service(req, resp) - викликається в новому потоці    @Override    protected void doGet(HttpServletRequest req, HttpServletResponse resp) throws IOException {        // відправити в відповідь на запит в форматі інтернет сторінки        resp.setContentType("text/html; charset=utf-8");        // наповнити поток такими данними        resp.getWriter().write(("<h1>" + convert("Привіт") + " ${name}!</h1>").replace("${name}", parseName(req)));        // добавили перенос рядка        resp.getWriter().write("<br>Параметри</br>");        resp.getWriter().write(getAllParameters(req));        resp.getWriter().write("<br>ЧАС<br>");        String currentTime = LocalDateTime.now().format(DateTimeFormatter.ofPattern(                "Дата: yyyy-MM-dd, Час: HH:mm:ss"        ));        resp.getWriter().write(currentTime);        resp.getWriter().write("<br>Headers</br>");        resp.getWriter().write(getAllHeaders(req));        //оновлює сторінку через кожні вказані секунди        /*        resp.setHeader("Refresh", "5");        **/        // закрити поток        resp.getWriter().close();    }    @Override    protected void doPost(HttpServletRequest req, HttpServletResponse resp) throws IOException {        doGet(req, resp);    }    private String parseName(HttpServletRequest request) {        if (request.getParameterMap().containsKey("name")) {            return request.getParameter("name");        }        return "unnamed";    }    private String convert(String text) {        return new String(text.getBytes(), StandardCharsets.UTF_8);    }    private String getAllParameters(HttpServletRequest request) {        String contentType = request.getHeader("content-type");        if ("application/json".equals(contentType)) {            return getAllParametersJson(request);        } else {            return getAllParametersUrlEncoded(request);        }    }    private String getAllParametersJson(HttpServletRequest request) {        try {            String body = request                    .getReader()                    .lines()                    .collect(Collectors.joining("\n"));            Map<String, String> params = new Gson().fromJson(body,                    TypeToken.getParameterized(Map.class, String.class, String.class).getType());            return params                    .entrySet()                    .stream().map(it -> it.getKey() + " = " + it.getValue())                    .collect(Collectors.joining("<br>"));        } catch (Exception exception) {            exception.printStackTrace();        }        return "";    }    private String getAllParametersUrlEncoded(HttpServletRequest request) {        StringJoiner result = new StringJoiner("<br>");        Enumeration<String> parameterNames = request.getParameterNames();        while (parameterNames.hasMoreElements()) {            String parameterName = parameterNames.nextElement();            String parameterValues = Arrays.toString(request.getParameterValues(parameterName));            result.add(parameterName + " = " + parameterValues);        }        return result.toString();    }    private String getAllHeaders(HttpServletRequest request) {        StringJoiner result = new StringJoiner("<br>");        Enumeration<String> headerNames = request.getHeaderNames();        while (headerNames.hasMoreElements()) {            String headerName = headerNames.nextElement();            String headerValue = request.getHeader(headerName);            result.add(headerName + " = " + headerValue);        }        return result.toString();    }}